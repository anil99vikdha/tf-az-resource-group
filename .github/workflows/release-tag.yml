name: 'Semantic Version Tagging'

on:
  pull_request:
    types: [closed]

permissions:
  contents: write  # needed for tagging

jobs:
  release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get latest git tag
      id: get_latest_tag
      run: echo "LATEST_TAG=$(git describe --tags --abbrev=0 || echo 'v0.0.0')" >> $GITHUB_OUTPUT

    - name: Get merged PR title
      id: pr_title
      run: |
        TITLE="${{ github.event.pull_request.title }}"
        echo "PR_TITLE=$TITLE" >> $GITHUB_OUTPUT

    - name: Determine version bump
      id: bump_type
      run: |
        TITLE="${{ steps.pr_title.outputs.PR_TITLE }}"
        echo "PR Title: '$TITLE'"

        if [[ "$TITLE" == feat:* ]]; then
          echo "BUMP=major" >> $GITHUB_OUTPUT
        elif [[ "$TITLE" == fix!:* ]]; then
          echo "BUMP=minor" >> $GITHUB_OUTPUT
        elif [[ "$TITLE" == fix:* ]]; then
          echo "BUMP=patch" >> $GITHUB_OUTPUT
        else
          echo "BUMP=patch" >> $GITHUB_OUTPUT
        fi

    - name: Calculate new version
      id: new_version
      run: |
        LATEST_TAG=${{ steps.get_latest_tag.outputs.LATEST_TAG }}
        BUMP=${{ steps.bump_type.outputs.BUMP }}

        VERSION="${LATEST_TAG#v}"
        IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

        if [[ "$BUMP" == "major" ]]; then
          MAJOR=$((MAJOR + 1))
          MINOR=0
          PATCH=0
        elif [[ "$BUMP" == "minor" ]]; then
          MINOR=$((MINOR + 1))
          PATCH=0
        else
          PATCH=$((PATCH + 1))
        fi

        NEW_TAG="v${MAJOR}.${MINOR}.${PATCH}"
        echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT

    - name: Push new version tag to GitHub
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        git tag ${{ steps.new_version.outputs.NEW_TAG }}
        git push origin ${{ steps.new_version.outputs.NEW_TAG }}
